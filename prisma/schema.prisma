// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  currency      String    @default("USD")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts         Account[]
  sessions         Session[]
  financialAccounts FinancialAccount[]
  transactions     Transaction[]
  categories       Category[]
  budgets          Budget[]
  bills            Bill[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model FinancialAccount {
  id          String   @id @default(cuid())
  name        String
  type        String   // checking, savings, credit, investment
  balance     Decimal  @default(0)
  currency    String   @default("USD")
  isActive    Boolean  @default(true)
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]
}

model Category {
  id          String   @id @default(cuid())
  name        String
  type        String   // income, expense, transfer
  color       String   @default("#3B82F6")
  icon        String   @default("DollarSign")
  userId      String
  isDefault   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]
  budgets      Budget[]
}

model Transaction {
  id          String   @id @default(cuid())
  amount      Decimal
  description String
  type        String   // income, expense, transfer
  date        DateTime
  tags        String[] @default([])
  userId      String
  accountId   String
  categoryId  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user     User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  account  FinancialAccount @relation(fields: [accountId], references: [id], onDelete: Cascade)
  category Category         @relation(fields: [categoryId], references: [id], onDelete: Cascade)
}

model Budget {
  id         String   @id @default(cuid())
  name       String
  amount     Decimal
  spent      Decimal  @default(0)
  period     String   // monthly, yearly
  startDate  DateTime
  endDate    DateTime
  userId     String
  categoryId String
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
}

model Bill {
  id          String   @id @default(cuid())
  name        String
  amount      Decimal
  dueDate     DateTime
  frequency   String   // monthly, yearly, weekly
  isPaid      Boolean  @default(false)
  isRecurring Boolean  @default(true)
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
